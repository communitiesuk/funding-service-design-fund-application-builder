name: Deploy to AWS
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Deploy to {0}', github.event.inputs.environment) || (github.ref == 'refs/heads/main' && 'Deploy to Test-UAT' || 'Build & Unit Test') }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Which AWS Account to use
        type: choice
        required: true
        options:
          - dev
          - test
          - uat
      run_e2e_tests:
        required: false
        default: true
        type: boolean
        description: Run e2e tests after deployment
  push:

jobs:
  setup:
    name: Setup
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/determine-jobs.yml@main
    with:
      environment: ${{ inputs.environment }}

  unit_tests:
    name: Run unit tests
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/pre-deploy.yml@main
    with:
      postgres_unit_testing: true
      db_name: fab_store_test

  e2e:
    if: github.event_name == 'push'
    name: Run E2E tests
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.47.0-noble@sha256:3d41153494e2b12a5a5fa6e26cf1e854c3997d13758754d46e7bf902b5ba09b1
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password # pragma: allowlist secret
          POSTGRES_USER: postgres # pragma: allowlist secret
          POSTGRES_DB: fab_store # pragma: allowlist secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install uv with Caching
        uses: astral-sh/setup-uv@f94ec6bedd8674c4426838e6b50417d36b6ab231 # v5
        with:
          enable-cache: true
      - name: Apply Database Migrations
        run: uv run --frozen flask db upgrade
        env:
          DATABASE_URL: postgresql://postgres:password@postgres:5432/fab_store # pragma: allowlist secret
      - name: Start Flask Application
        run: uv run --frozen flask run --no-debugger --host 0.0.0.0 --port 8080 &
        env:
          DATABASE_URL: postgresql://postgres:password@postgres:5432/fab_store # pragma: allowlist secret
          RSA256_PUBLIC_KEY_BASE64: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTUFEQ0JpQUtCZ0hHYnRGMXlWR1crckNBRk9JZGFrVVZ3Q2Z1dgp4SEUzOGxFL2kwS1dwTXdkU0haRkZMWW5IakJWT09oMTVFaWl6WXphNEZUSlRNdkwyRTRRckxwcVlqNktFNnR2CkhyaHlQL041ZnlwU3p0OHZDajlzcFo4KzBrRnVjVzl6eU1rUHVEaXNZdG1rV0dkeEJta2QzZ3RZcDNtT0k1M1YKVkRnS2J0b0lGVTNzSWs1TkFnTUJBQUU9Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==" # pragma: allowlist secret
      - name: Wait for Application to Initialize
        run: sleep 5
      - name: Execute End-to-End Tests
        run: uv run --frozen pytest --e2e --e2e-env e2e

  paketo_build:
    name: Package and build application
    needs: [ setup, unit_tests, e2e ]
    permissions:
      packages: write
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/package.yml@main
    with:
      version_to_build: sha-${{ github.sha }}
      owner: ${{ github.repository_owner }}
      application: funding-service-design-fund-application-builder
      assets_required: true

  dev_deploy:
    name: Deploy to Dev
    needs: [ paketo_build ]
    if: ${{ contains(fromJSON(needs.setup.outputs.jobs_to_run), 'dev') }}
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/standard-deploy.yml@main
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
    with:
      environment: dev
      app_name: fund-application-builder
      run_db_migrations: true
      image_location: ${{ needs.paketo_build.outputs.image_location }}
      notify_slack: false

  dev_e2e_test:
    # Do not run these against the prod environment without addressing the auth/JWT self-signing done by e2e tests.
    if: ${{ contains(fromJSON(needs.setup.outputs.jobs_to_run), 'dev') && (github.event_name == 'push' || inputs.run_e2e_tests == true) }}
    name: Run E2E tests vs Dev
    needs: [ dev_deploy, setup ]
    uses: ./.github/workflows/test_e2e_aws.yml
    with:
      environment: 'dev'
    secrets: inherit # pragma: allowlist secret

  test_deploy:
    needs: [ paketo_build, setup ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'test') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') )}}
    name: Deploy to Test
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/standard-deploy.yml@main
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
    with:
      environment: test
      app_name: fund-application-builder
      run_db_migrations: true
      image_location: ${{ needs.paketo_build.outputs.image_location }}
      notify_slack: true

  test_e2e_test:
    # Do not run these against the prod environment without addressing the auth/JWT self-signing done by e2e tests.
    if: ${{ contains(fromJSON(needs.setup.outputs.jobs_to_run), 'test') && (github.event_name == 'push' || inputs.run_e2e_tests == true) }}
    name: Run E2E tests vs Test
    needs: [ test_deploy, setup ]
    uses: ./.github/workflows/test_e2e_aws.yml
    with:
      environment: 'test'
    secrets: inherit # pragma: allowlist secret

  uat_deploy:
    needs: [ test_e2e_test, paketo_build, setup ]
    if: ${{ always() && contains(fromJSON(needs.setup.outputs.jobs_to_run), 'uat') && (! contains(needs.*.result, 'failure') ) && (! contains(needs.*.result, 'cancelled') )}}
    name: Deploy to UAT
    uses: communitiesuk/funding-service-design-workflows/.github/workflows/standard-deploy.yml@main
    secrets:
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_NOTIFICATION_CHANNEL_ID: ${{ secrets.SLACK_NOTIFICATION_CHANNEL_ID }}
      SLACK_DEPLOYMENTS_CHANNEL_ID: ${{ secrets.SLACK_DEPLOYMENTS_CHANNEL_ID }}
    with:
      environment: uat
      app_name: fund-application-builder
      run_db_migrations: true
      image_location: ${{ needs.paketo_build.outputs.image_location }}
      notify_slack: true
      notify_slack_on_deployment: true
